#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
# Author: hacker
# Describe how and why you modified the baseline code.
# iaddq perform better than irmovq + addq
# exchange some sentence's order to avoid repeat
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	jmp Test		# judge six loop unroll

Loop6:	mrmovq (%rdi), %r10	# read src[i]
	mrmovq 8(%rdi), %r11	# read src[i + 1]
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)
	andq %r10, %r10		# src[i] <= 0?
	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:   
	andq %r11, %r11		# src[i+1] <= 0?
	jle Npos2		# if so, goto Npos2:
	iaddq $1, %rax		# count++
Npos2:
	mrmovq 16(%rdi), %r10	# read src[i+2]
	mrmovq 24(%rdi), %r11	# read src[i+3]
	rmmovq %r10, 16(%rsi)	# store it to dst
	rmmovq %r11, 24(%rsi)	# store it to dst
	andq %r10, %r10
	jle Npos3
	iaddq $1, %rax
Npos3:
	andq %r11, %r11
	jle Npos4
	iaddq $1, %rax
Npos4:
	mrmovq 32(%rdi), %r10
	mrmovq 40(%rdi), %r11
	rmmovq %r10, 32(%rsi)
	rmmovq %r11, 40(%rsi)
	andq %r10, %r10
	jle Npos5
	iaddq $1, %rax
Npos5:
	andq %r11, %r11
	jle LoopUpdate
	iaddq $1, %rax
LoopUpdate:	
	iaddq $48, %rdi		# update src = src + 6
	iaddq $48, %rsi		# update dst = dst + 6
			
Test:	
	iaddq $-6, %rdx		# judge six loop unroll
	andq %rdx, %rdx		# if ok? 	
	jge Loop6		# if so, goto Loop
	jmp Test1
Loop3:
	mrmovq (%rdi), %r10
	mrmovq 8(%rdi), %r11
	mrmovq 16(%rdi), %r12 
	rmmovq %r10, (%rsi)
	rmmovq %r11, 8(%rsi)
	rmmovq %r12, 16(%rsi)
	andq %r10, %r10
	jle Loop3Npos1
	iaddq $1, %rax
Loop3Npos1:
	andq %r11, %r11
	jle Loop3Npos2
	iaddq $1, %rax
Loop3Npos2:
	andq %r12, %r12
	jle Loop3Update
	iaddq $1, %rax
Loop3Update:
	iaddq $24, %rdi
	iaddq $24, %rsi
	iaddq $-3, %rdx
	jmp Test2
Test1:
	iaddq $3, %rdx		# judge three loop unroll
	andq %rdx, %rdx 	# if ok?
	jge Loop3		# ok!
Test2:
	iaddq $2, %rdx
	je Loop1		# one element in src warit to copy
	jl Done			# empty element in src wait to copy  
	mrmovq (%rdi), %r10	# copy src[len - 2] to %r10
	mrmovq 8(%rdi), %r11	# copy src[len - 1] to %r11
	rmmovq %r10, (%rsi)	
	rmmovq %r11, 8(%rsi)
	andq %r10, %r10
	jle Loop2Npos1
	iaddq $1, %rax
Loop2Npos1:
	andq %r11, %r11
	jle Done
	iaddq $1, %rax
	jmp Done
Loop1:
	mrmovq (%rdi), %r10
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle Done
	iaddq $1, %rax
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
